archive() {
    local success
    local remove_source=0
    if [ $# -eq 0 ]; then
	echo "USAGE : archive [options] files..."
	echo ""
	echo "\t-r,--remove\tremove source file"
	echo ""
    fi
    if [ "$1" = "-r" ] || [ "$1" = "--remove" ]; then
	remove_source=1
	shift
    fi
    while (( $# > 0 ))
    do
	tar cjvf "$1".tar.bz2 "$1"
	success=$?
	if [ $remove_source -eq 1 ] && [ $success -eq 0 ]; then
	    rm -rf "$1"
	fi
	if [ $success -ne 0 ]; then
	    echo "Erreur lors de l'opÃ©ration d'archivage sur le fichier : $1"
	    break
	fi
	shift
    done
}

function pdftk() {
  docker run --rm -it -v $PWD:/data --workdir /data restanrm/docker-pdftk pdftk $@
}

# new kctx function
if [ -f ~/.kube.env ]; then source ~/.kube.env; fi
kctx() {
  local args=$1
  conf=$HOME/.kube/configs/$(ls $HOME/.kube/configs | fzf --query "${args}" --select-1 --exit-0)
  if [ -f "${conf}" ]; then
    export KUBECONFIG="${conf}"
    echo "export KUBECONFIG=${conf}" > $HOME/.kube.env
  fi
}

kex() {
  pod=$(kubectl get pod -o wide | grep Running | fzf --exit-0 --select-1 | awk '{print $1}')
  echo "kubectl exec -it ${pod} -- $@"
  kubectl exec -it ${pod} -- $@
}

# worktree feature for git
work() {
  local worktrees_dir=~/.wt
  local depth=1
  local args=$@


  # select the worktree
  local dir=$(fd . ${worktrees_dir} --type d --max-depth ${depth} --min-depth ${depth} | xargs -I {} basename {} | fzf --query "${args}" --print-query | tail -n 1)

  # return if $dir points nowhere
  if [ -z $dir ]; then
    return
  fi

  if [ -d ${worktrees_dir}/$dir ]; then
    # if worktree already exist, cd into it
    cd ${worktrees_dir}/$dir
    swaymsg rename workspace to "${dir}"
  else
    # exit if we are not in a git repository
    git status 2>/dev/null 1>/dev/null
    if [ $? -ne 0 ]; then
      echo "Creating a worktree should be done in the original git directory"
      return
    fi

    local git_user=$(git remote -v | grep origin|awk -F':' '{print $2}' | awk '{print $1}' | awk -F'/' '{print $1}'| tail -n 1)
    local repo_name=$(git remote -v | grep origin|awk -F':' '{print $2}' | awk '{print $1}' | awk -F'/' '{print $2}'| xargs -I {} basename {} .git |tail -n 1)

    # select the main branch of the repository to tie the branch to
    local main_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')

    git fetch -p
    git worktree add ${worktrees_dir}/${git_user}-${repo_name}-${dir} -b $dir origin/$dir
    if [ $? -eq 255 ]; then
      git worktree add ${worktrees_dir}/${git_user}-${repo_name}-${dir} -b $dir origin/${main_branch} --no-track
      if [ $? -eq 255 ]; then
        git worktree add ${worktrees_dir}/${git_user}-${repo_name}-${dir} $dir
      fi
    fi
    cd ${worktrees_dir}/${git_user}-${repo_name}-${dir}
    swaymsg rename workspace to "${git_user}-${repo_name}-${dir}"
  fi
}

endwork() {
  local worktrees_dir=~/.wt
  local depth=1
  local args=$@

  # exit if we are not in a git repository
  git status 2>/dev/null 1>/dev/null
  if [ $? -ne 0 ]; then
    echo "Removing a worktree should be done in a git directory"
    return
  fi

  if [ -z "${args}" ]; then args="$(git rev-parse --abbrev-ref HEAD)"; fi
  local dir=$(fd . ${worktrees_dir} --type d --max-depth ${depth} --min-depth ${depth} | xargs -I {} basename {} | fzf --print-query --query "$args" --exit-0 | tail -n 1)

  # return if $dir points nowhere
  if [ -z $dir ]; then
    return
  fi

  local git_user=$(git remote -v | grep origin|awk -F':' '{print $2}' | awk '{print $1}' | awk -F'/' '{print $1}'| tail -n 1)
  local repo_name=$(git remote -v | grep origin|awk -F':' '{print $2}' | awk '{print $1}' | awk -F'/' '{print $2}'| xargs -I {} basename {} .git |tail -n 1)

  if [ -d ${worktrees_dir}/$dir ]; then
    pushd $(git worktree list | head -n 1| awk '{print $1}')
    git pull
    git worktree remove $dir --force
    git branch -D ${dir##${git_user}-${repo_name}-}
    git remote update origin --prune
  fi
}

{{- if .work }}
function ssht(){
  ssh -I /usr/lib/libykcs11.so adrien@141.94.167.154 -t -- $@
}

function sshp() {
  ssh -I /usr/lib/libykcs11.so adrien@54.37.23.139 -t -- $@
}

function obs() {
  swaymsg rename workspace to 8
  /usr/bin/obs
}

# find in platform repository
function sf() {
  local args=$@
  #cd $(rg /home/nrm/dev/git/github.com/SekoiaLab/platform --files --null | xargs -0 dirname | awk '!h[$0]++' |fzf -q "${args} ")
  cd $(fd . --type d | fzf --query "${args} " --select-1 --exit-0)
}

# openstack context change function
unset OS_CLOUD
osctx () {
  local args=$1
  source <(gopass ls --flat | grep openrc.sh | rofi -dmenu | xargs --no-run-if-empty gopass show -n)
}


{{- end }}
