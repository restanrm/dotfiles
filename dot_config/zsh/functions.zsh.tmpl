archive() {
    local success
    local remove_source=0
    if [ $# -eq 0 ]; then
	echo "USAGE : archive [options] files..."
	echo ""
	echo "\t-r,--remove\tremove source file"
	echo ""
    fi
    if [ "$1" = "-r" ] || [ "$1" = "--remove" ]; then
	remove_source=1
	shift
    fi
    while (( $# > 0 ))
    do
	tar cjvf "$1".tar.bz2 "$1"
	success=$?
	if [ $remove_source -eq 1 ] && [ $success -eq 0 ]; then
	    rm -rf "$1"
	fi
	if [ $success -ne 0 ]; then
	    echo "Erreur lors de l'opÃ©ration d'archivage sur le fichier : $1"
	    break
	fi
	shift
    done
}

function pdftk() {
  docker run --rm -it -v $PWD:/data --workdir /data restanrm/docker-pdftk pdftk $@
}

# new kctx function
if [ -f ~/.kube.env ]; then source ~/.kube.env; fi
kctx() {
  local args=$1
  conf=$HOME/.kube/configs/$(ls $HOME/.kube/configs | fzf --query "${args}" --select-1 --exit-0)
  if [ -f "${conf}" ]; then
    export KUBECONFIG="${conf}"
    echo "export KUBECONFIG=${conf}" > $HOME/.kube.env
  fi
}

kex() {
  pod=$(kubectl get pod -o wide | grep Running | fzf --exit-0 --select-1 | awk '{print $1}')
  echo "kubectl exec -it ${pod} -- $@"
  kubectl exec -it ${pod} -- $@
}


{{- if .work }}
function ssht() {
  local out
  first=$1
  shift
  for srv in "$@"; do
    out="${out}tmux split-window 'ssh $srv';"
  done
  out="${out}tmux select-layout even-vertical;"
  out="${out}ssh $first;"
  eval $out
}

# function that infer connection to multiple instance of the same type
# admin app-server 3
# is equivalent to
# ssht app-server1 app-server2 app-server3
function admin() {
  local server
  local number
  local out
  server=$1
  number=$2
  for i in $(seq $number); do
    out="${out} ${server}$i"
  done
  echo -ne "$out"
  ssht ${out}
}

function vsphere() {
  docker run --rm -it lamw/rvc rvc ara@37.187.228.30
}

function obs() {
  swaymsg rename workspace to obs
  /usr/bin/obs
}

# find in platform repository
function sf() {
  local args=$@
  #cd $(rg /home/nrm/dev/git/github.com/SekoiaLab/platform --files --null | xargs -0 dirname | awk '!h[$0]++' |fzf -q "${args} ")
  cd $(fd . --type d /home/nrm/dev/git/github.com/SekoiaLab/platform | fzf --query "${args} " --select-1 --exit-0)
}

# openstack context change function
unset OS_CLOUD
osctx () {
  local args=$1
  source <(gopass ls --flat | grep openrc.sh | rofi -dmenu | xargs --no-run-if-empty gopass show -n)
}

# needs:
# cd into exiting repository
# create now PR and go to that directory (only in cli for now)
# update current namespace to branch name
# TODO: code the following function to be generic.
gworktree() {
  git fetch -p
  # folder to store all worktrees for all repositories
  local worktrees_dir=/home/nrm/dev/git-trees
  # TODO: improve perf of informations retrieval about branch
  # should store the following in a cached file related to repository maybe at
  # the same place than where we store the content of the branches
  local origin="origin/$(git remote show origin | grep HEAD | sed -n 's/.*HEAD : //p')"
  swaymsg rename workspace to "${branch-name}"
  # find a way to get basepath of the repository
  # this command should only match my way of storing git arborescence. Each
  # parameter should be tuned to you preference
  local depth=4
  local branch=$(fd . ${worktrees_dir} --type d --max-depth ${depth} --min-depth ${depth} | xargs -I {} basename {} | fzf --print-query | tail -n 1)
  swaymsg "rename workspace to ${branch}"
  # git worktree add -b update-grafana-version /home/nrm/dev/git-trees/github.com/SekoiaLab/platform/update-grafana-version origin/develop
  # git worktree add -b ${branch} ${worktrees_dir}/github.com/SekoiaLab/platform/${branch} ${origin}
}

# jumpstart of the worktree feature. Need to improve this
work() {
  local worktrees_dir=/home/nrm/dev/git-trees/github.com/SekoiaLab/platform
  local repo_dir=/home/nrm/dev/git/github.com/SekoiaLab/platform
  local depth=1
  local args=$@
  local dir=$(fd . ${worktrees_dir} --type d --max-depth ${depth} --min-depth ${depth} | xargs -I {} basename {} | fzf --query "$args" --print-query | tail -n 1)
  if [ ! -z $dir ]; then
    if [ -d ${worktrees_dir}/$dir ]; then
      cd ${worktrees_dir}/$dir
      swaymsg rename workspace to "${dir}"
    else
      cd ${repo_dir}
      git fetch -p
      git worktree add ${worktrees_dir}/$dir -b $dir origin/develop --no-track
      if [ $? -eq 255 ];
      then
        git worktree add ${worktrees_dir}/$dir $dir
      fi
      cd ${worktrees_dir}/$dir
      swaymsg rename workspace to "${dir}"
    fi
  fi
}

# temporary endwork function just to jumpstart usage of this feature
endwork() {
  local worktrees_dir=/home/nrm/dev/git-trees/github.com/SekoiaLab/platform
  local repo_dir=/home/nrm/dev/git/github.com/SekoiaLab/platform
  local depth=1
  local dir=$(fd . ${worktrees_dir} --type d --max-depth ${depth} --min-depth ${depth} | xargs -I {} basename {} | fzf --print-query --exit-0 | tail -n 1)
  if [ ! -z $dir ]; then
    if [ -d ${worktrees_dir}/$dir ]; then
      pushd ${repo_dir}
      git worktree remove $dir
      git branch -D $dir
      popd
    fi
  fi
}


{{- end }}
